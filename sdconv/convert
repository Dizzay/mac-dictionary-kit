#!/usr/bin/python

import sys, os, glob, commands

def cleanup():
    os.system("rm -rf temp/")

self_path = sys.path[0]

if len(sys.argv) < 2:
    print "usage: convert <stardict-*.bz2>"
    sys.exit(1)

dict_file = sys.argv[1]

cleanup()
os.makedirs("temp/")

# if it's a bzipped file, extract it first
if dict_file.endswith(".bz2"):
    os.system("tar -xjf %s -C temp/" % dict_file)
    
    ifos = glob.glob("temp/*/*.ifo")

    if len(ifos) == 0:
        print "no .ifo files existed in %s, not a valid stardict format" % dict_file
        cleanup()
        sys.exit(1)
    
    ifo_file = ifos[0]

elif dict_file.endswith(".ifo"):
    if os.access(dict_file, os.R_OK):
        ifo_file = dict_file
    else:
        print "%s not readable" % dict_file
        sys.exit(1)

print "ifo_file = %s" % ifo_file

(dict_id, ext) = os.path.splitext(os.path.basename(ifo_file))
print "dict_id = %s" % dict_id

# dyld_lib_path = os.getenv("DYLD_LIBRARY_PATH")
# dyld_lib_path = "%s/lib:%s" % (self_path, dyld_lib_path)

# os.putenv("DYLD_LIBRARY_PATH", dyld_lib_path)

dict_path = "temp/dict-%s" % dict_id

os.system("cp -r %s/templates %s" % (self_path, dict_path))

cmd = "DYLD_LIBRARY_PATH=%s/bin %s/bin/sdconv %s %s/Dictionary.xml" % (self_path, self_path, 
                                                                          ifo_file, dict_path)
print cmd
(status, output) = commands.getstatusoutput(cmd)
if status != 0:
    print "convert dictionary %s failed, abort now." % dict_id
    cleanup()
    sys.exit(1)

dict_name = output.split()[0]
print "dict_name = %s" % dict_name

os.system("/usr/bin/sed -i '' -e 's/\\$DICT_NAME/%s/g' %s/DictInfo.plist" % (dict_name, dict_path))
os.system("/usr/bin/sed -i '' -e 's/\\$DICT_ID/%s/g' %s/DictInfo.plist" % (dict_id, dict_path))

os.system("cat %s/DictInfo.plist" % dict_path);
cwd = os.getcwd()
os.system("cd %s; python build-dict.py %s '%s'; cd %s" % (dict_path, dict_id, self_path, cwd));

cleanup()

